/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.amf.user.profile.model.impl;

import com.amf.user.profile.model.MovieInterest;
import com.amf.user.profile.model.MovieInterestModel;
import com.amf.user.profile.model.MovieInterestSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MovieInterest service. Represents a row in the &quot;UserProfile_MovieInterest&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.amf.user.profile.model.MovieInterestModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MovieInterestImpl}.
 * </p>
 *
 * @author andrefabbro
 * @see MovieInterestImpl
 * @see com.amf.user.profile.model.MovieInterest
 * @see com.amf.user.profile.model.MovieInterestModel
 * @generated
 */
@JSON(strict = true)
public class MovieInterestModelImpl extends BaseModelImpl<MovieInterest>
	implements MovieInterestModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a movie interest model instance should use the {@link com.amf.user.profile.model.MovieInterest} interface instead.
	 */
	public static final String TABLE_NAME = "UserProfile_MovieInterest";
	public static final Object[][] TABLE_COLUMNS = {
			{ "movieInterestId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "favoriteMovie", Types.VARCHAR },
			{ "favoriteGenre", Types.VARCHAR },
			{ "leastFavMovie", Types.VARCHAR },
			{ "favoriteActor", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table UserProfile_MovieInterest (movieInterestId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,favoriteMovie VARCHAR(500) null,favoriteGenre VARCHAR(75) null,leastFavMovie VARCHAR(500) null,favoriteActor VARCHAR(100) null)";
	public static final String TABLE_SQL_DROP = "drop table UserProfile_MovieInterest";
	public static final String ORDER_BY_JPQL = " ORDER BY movieInterest.movieInterestId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY UserProfile_MovieInterest.movieInterestId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.amf.user.profile.model.MovieInterest"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.amf.user.profile.model.MovieInterest"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.amf.user.profile.model.MovieInterest"),
			true);
	public static long USERID_COLUMN_BITMASK = 1L;
	public static long MOVIEINTERESTID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MovieInterest toModel(MovieInterestSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MovieInterest model = new MovieInterestImpl();

		model.setMovieInterestId(soapModel.getMovieInterestId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setFavoriteMovie(soapModel.getFavoriteMovie());
		model.setFavoriteGenre(soapModel.getFavoriteGenre());
		model.setLeastFavMovie(soapModel.getLeastFavMovie());
		model.setFavoriteActor(soapModel.getFavoriteActor());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MovieInterest> toModels(MovieInterestSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MovieInterest> models = new ArrayList<MovieInterest>(soapModels.length);

		for (MovieInterestSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.amf.user.profile.model.MovieInterest"));

	public MovieInterestModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _movieInterestId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMovieInterestId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _movieInterestId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MovieInterest.class;
	}

	@Override
	public String getModelClassName() {
		return MovieInterest.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("movieInterestId", getMovieInterestId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("favoriteMovie", getFavoriteMovie());
		attributes.put("favoriteGenre", getFavoriteGenre());
		attributes.put("leastFavMovie", getLeastFavMovie());
		attributes.put("favoriteActor", getFavoriteActor());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long movieInterestId = (Long)attributes.get("movieInterestId");

		if (movieInterestId != null) {
			setMovieInterestId(movieInterestId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String favoriteMovie = (String)attributes.get("favoriteMovie");

		if (favoriteMovie != null) {
			setFavoriteMovie(favoriteMovie);
		}

		String favoriteGenre = (String)attributes.get("favoriteGenre");

		if (favoriteGenre != null) {
			setFavoriteGenre(favoriteGenre);
		}

		String leastFavMovie = (String)attributes.get("leastFavMovie");

		if (leastFavMovie != null) {
			setLeastFavMovie(leastFavMovie);
		}

		String favoriteActor = (String)attributes.get("favoriteActor");

		if (favoriteActor != null) {
			setFavoriteActor(favoriteActor);
		}
	}

	@JSON
	@Override
	public long getMovieInterestId() {
		return _movieInterestId;
	}

	@Override
	public void setMovieInterestId(long movieInterestId) {
		_movieInterestId = movieInterestId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getFavoriteMovie() {
		if (_favoriteMovie == null) {
			return StringPool.BLANK;
		}
		else {
			return _favoriteMovie;
		}
	}

	@Override
	public void setFavoriteMovie(String favoriteMovie) {
		_favoriteMovie = favoriteMovie;
	}

	@JSON
	@Override
	public String getFavoriteGenre() {
		if (_favoriteGenre == null) {
			return StringPool.BLANK;
		}
		else {
			return _favoriteGenre;
		}
	}

	@Override
	public void setFavoriteGenre(String favoriteGenre) {
		_favoriteGenre = favoriteGenre;
	}

	@JSON
	@Override
	public String getLeastFavMovie() {
		if (_leastFavMovie == null) {
			return StringPool.BLANK;
		}
		else {
			return _leastFavMovie;
		}
	}

	@Override
	public void setLeastFavMovie(String leastFavMovie) {
		_leastFavMovie = leastFavMovie;
	}

	@JSON
	@Override
	public String getFavoriteActor() {
		if (_favoriteActor == null) {
			return StringPool.BLANK;
		}
		else {
			return _favoriteActor;
		}
	}

	@Override
	public void setFavoriteActor(String favoriteActor) {
		_favoriteActor = favoriteActor;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			MovieInterest.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MovieInterest toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MovieInterest)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MovieInterestImpl movieInterestImpl = new MovieInterestImpl();

		movieInterestImpl.setMovieInterestId(getMovieInterestId());
		movieInterestImpl.setGroupId(getGroupId());
		movieInterestImpl.setCompanyId(getCompanyId());
		movieInterestImpl.setUserId(getUserId());
		movieInterestImpl.setUserName(getUserName());
		movieInterestImpl.setCreateDate(getCreateDate());
		movieInterestImpl.setModifiedDate(getModifiedDate());
		movieInterestImpl.setFavoriteMovie(getFavoriteMovie());
		movieInterestImpl.setFavoriteGenre(getFavoriteGenre());
		movieInterestImpl.setLeastFavMovie(getLeastFavMovie());
		movieInterestImpl.setFavoriteActor(getFavoriteActor());

		movieInterestImpl.resetOriginalValues();

		return movieInterestImpl;
	}

	@Override
	public int compareTo(MovieInterest movieInterest) {
		long primaryKey = movieInterest.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MovieInterest)) {
			return false;
		}

		MovieInterest movieInterest = (MovieInterest)obj;

		long primaryKey = movieInterest.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		MovieInterestModelImpl movieInterestModelImpl = this;

		movieInterestModelImpl._originalUserId = movieInterestModelImpl._userId;

		movieInterestModelImpl._setOriginalUserId = false;

		movieInterestModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MovieInterest> toCacheModel() {
		MovieInterestCacheModel movieInterestCacheModel = new MovieInterestCacheModel();

		movieInterestCacheModel.movieInterestId = getMovieInterestId();

		movieInterestCacheModel.groupId = getGroupId();

		movieInterestCacheModel.companyId = getCompanyId();

		movieInterestCacheModel.userId = getUserId();

		movieInterestCacheModel.userName = getUserName();

		String userName = movieInterestCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			movieInterestCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			movieInterestCacheModel.createDate = createDate.getTime();
		}
		else {
			movieInterestCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			movieInterestCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			movieInterestCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		movieInterestCacheModel.favoriteMovie = getFavoriteMovie();

		String favoriteMovie = movieInterestCacheModel.favoriteMovie;

		if ((favoriteMovie != null) && (favoriteMovie.length() == 0)) {
			movieInterestCacheModel.favoriteMovie = null;
		}

		movieInterestCacheModel.favoriteGenre = getFavoriteGenre();

		String favoriteGenre = movieInterestCacheModel.favoriteGenre;

		if ((favoriteGenre != null) && (favoriteGenre.length() == 0)) {
			movieInterestCacheModel.favoriteGenre = null;
		}

		movieInterestCacheModel.leastFavMovie = getLeastFavMovie();

		String leastFavMovie = movieInterestCacheModel.leastFavMovie;

		if ((leastFavMovie != null) && (leastFavMovie.length() == 0)) {
			movieInterestCacheModel.leastFavMovie = null;
		}

		movieInterestCacheModel.favoriteActor = getFavoriteActor();

		String favoriteActor = movieInterestCacheModel.favoriteActor;

		if ((favoriteActor != null) && (favoriteActor.length() == 0)) {
			movieInterestCacheModel.favoriteActor = null;
		}

		return movieInterestCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{movieInterestId=");
		sb.append(getMovieInterestId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", favoriteMovie=");
		sb.append(getFavoriteMovie());
		sb.append(", favoriteGenre=");
		sb.append(getFavoriteGenre());
		sb.append(", leastFavMovie=");
		sb.append(getLeastFavMovie());
		sb.append(", favoriteActor=");
		sb.append(getFavoriteActor());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.amf.user.profile.model.MovieInterest");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>movieInterestId</column-name><column-value><![CDATA[");
		sb.append(getMovieInterestId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>favoriteMovie</column-name><column-value><![CDATA[");
		sb.append(getFavoriteMovie());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>favoriteGenre</column-name><column-value><![CDATA[");
		sb.append(getFavoriteGenre());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leastFavMovie</column-name><column-value><![CDATA[");
		sb.append(getLeastFavMovie());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>favoriteActor</column-name><column-value><![CDATA[");
		sb.append(getFavoriteActor());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MovieInterest.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MovieInterest.class
		};
	private long _movieInterestId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _favoriteMovie;
	private String _favoriteGenre;
	private String _leastFavMovie;
	private String _favoriteActor;
	private long _columnBitmask;
	private MovieInterest _escapedModel;
}