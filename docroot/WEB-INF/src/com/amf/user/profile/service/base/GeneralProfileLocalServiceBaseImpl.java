/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.amf.user.profile.service.base;

import com.amf.user.profile.model.GeneralProfile;
import com.amf.user.profile.service.GeneralProfileLocalService;
import com.amf.user.profile.service.persistence.GeneralProfilePersistence;
import com.amf.user.profile.service.persistence.MovieInterestPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the general profile local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.amf.user.profile.service.impl.GeneralProfileLocalServiceImpl}.
 * </p>
 *
 * @author andrefabbro
 * @see com.amf.user.profile.service.impl.GeneralProfileLocalServiceImpl
 * @see com.amf.user.profile.service.GeneralProfileLocalServiceUtil
 * @generated
 */
public abstract class GeneralProfileLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements GeneralProfileLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.amf.user.profile.service.GeneralProfileLocalServiceUtil} to access the general profile local service.
	 */

	/**
	 * Adds the general profile to the database. Also notifies the appropriate model listeners.
	 *
	 * @param generalProfile the general profile
	 * @return the general profile that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public GeneralProfile addGeneralProfile(GeneralProfile generalProfile)
		throws SystemException {
		generalProfile.setNew(true);

		return generalProfilePersistence.update(generalProfile);
	}

	/**
	 * Creates a new general profile with the primary key. Does not add the general profile to the database.
	 *
	 * @param generalProfileId the primary key for the new general profile
	 * @return the new general profile
	 */
	@Override
	public GeneralProfile createGeneralProfile(long generalProfileId) {
		return generalProfilePersistence.create(generalProfileId);
	}

	/**
	 * Deletes the general profile with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param generalProfileId the primary key of the general profile
	 * @return the general profile that was removed
	 * @throws PortalException if a general profile with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public GeneralProfile deleteGeneralProfile(long generalProfileId)
		throws PortalException, SystemException {
		return generalProfilePersistence.remove(generalProfileId);
	}

	/**
	 * Deletes the general profile from the database. Also notifies the appropriate model listeners.
	 *
	 * @param generalProfile the general profile
	 * @return the general profile that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public GeneralProfile deleteGeneralProfile(GeneralProfile generalProfile)
		throws SystemException {
		return generalProfilePersistence.remove(generalProfile);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(GeneralProfile.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return generalProfilePersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.amf.user.profile.model.impl.GeneralProfileModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return generalProfilePersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.amf.user.profile.model.impl.GeneralProfileModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return generalProfilePersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return generalProfilePersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return generalProfilePersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public GeneralProfile fetchGeneralProfile(long generalProfileId)
		throws SystemException {
		return generalProfilePersistence.fetchByPrimaryKey(generalProfileId);
	}

	/**
	 * Returns the general profile with the primary key.
	 *
	 * @param generalProfileId the primary key of the general profile
	 * @return the general profile
	 * @throws PortalException if a general profile with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public GeneralProfile getGeneralProfile(long generalProfileId)
		throws PortalException, SystemException {
		return generalProfilePersistence.findByPrimaryKey(generalProfileId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return generalProfilePersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the general profiles.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.amf.user.profile.model.impl.GeneralProfileModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of general profiles
	 * @param end the upper bound of the range of general profiles (not inclusive)
	 * @return the range of general profiles
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<GeneralProfile> getGeneralProfiles(int start, int end)
		throws SystemException {
		return generalProfilePersistence.findAll(start, end);
	}

	/**
	 * Returns the number of general profiles.
	 *
	 * @return the number of general profiles
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getGeneralProfilesCount() throws SystemException {
		return generalProfilePersistence.countAll();
	}

	/**
	 * Updates the general profile in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param generalProfile the general profile
	 * @return the general profile that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public GeneralProfile updateGeneralProfile(GeneralProfile generalProfile)
		throws SystemException {
		return generalProfilePersistence.update(generalProfile);
	}

	/**
	 * Returns the general profile local service.
	 *
	 * @return the general profile local service
	 */
	public com.amf.user.profile.service.GeneralProfileLocalService getGeneralProfileLocalService() {
		return generalProfileLocalService;
	}

	/**
	 * Sets the general profile local service.
	 *
	 * @param generalProfileLocalService the general profile local service
	 */
	public void setGeneralProfileLocalService(
		com.amf.user.profile.service.GeneralProfileLocalService generalProfileLocalService) {
		this.generalProfileLocalService = generalProfileLocalService;
	}

	/**
	 * Returns the general profile remote service.
	 *
	 * @return the general profile remote service
	 */
	public com.amf.user.profile.service.GeneralProfileService getGeneralProfileService() {
		return generalProfileService;
	}

	/**
	 * Sets the general profile remote service.
	 *
	 * @param generalProfileService the general profile remote service
	 */
	public void setGeneralProfileService(
		com.amf.user.profile.service.GeneralProfileService generalProfileService) {
		this.generalProfileService = generalProfileService;
	}

	/**
	 * Returns the general profile persistence.
	 *
	 * @return the general profile persistence
	 */
	public GeneralProfilePersistence getGeneralProfilePersistence() {
		return generalProfilePersistence;
	}

	/**
	 * Sets the general profile persistence.
	 *
	 * @param generalProfilePersistence the general profile persistence
	 */
	public void setGeneralProfilePersistence(
		GeneralProfilePersistence generalProfilePersistence) {
		this.generalProfilePersistence = generalProfilePersistence;
	}

	/**
	 * Returns the movie interest local service.
	 *
	 * @return the movie interest local service
	 */
	public com.amf.user.profile.service.MovieInterestLocalService getMovieInterestLocalService() {
		return movieInterestLocalService;
	}

	/**
	 * Sets the movie interest local service.
	 *
	 * @param movieInterestLocalService the movie interest local service
	 */
	public void setMovieInterestLocalService(
		com.amf.user.profile.service.MovieInterestLocalService movieInterestLocalService) {
		this.movieInterestLocalService = movieInterestLocalService;
	}

	/**
	 * Returns the movie interest remote service.
	 *
	 * @return the movie interest remote service
	 */
	public com.amf.user.profile.service.MovieInterestService getMovieInterestService() {
		return movieInterestService;
	}

	/**
	 * Sets the movie interest remote service.
	 *
	 * @param movieInterestService the movie interest remote service
	 */
	public void setMovieInterestService(
		com.amf.user.profile.service.MovieInterestService movieInterestService) {
		this.movieInterestService = movieInterestService;
	}

	/**
	 * Returns the movie interest persistence.
	 *
	 * @return the movie interest persistence
	 */
	public MovieInterestPersistence getMovieInterestPersistence() {
		return movieInterestPersistence;
	}

	/**
	 * Sets the movie interest persistence.
	 *
	 * @param movieInterestPersistence the movie interest persistence
	 */
	public void setMovieInterestPersistence(
		MovieInterestPersistence movieInterestPersistence) {
		this.movieInterestPersistence = movieInterestPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.amf.user.profile.model.GeneralProfile",
			generalProfileLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.amf.user.profile.model.GeneralProfile");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return GeneralProfile.class;
	}

	protected String getModelClassName() {
		return GeneralProfile.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = generalProfilePersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.amf.user.profile.service.GeneralProfileLocalService.class)
	protected com.amf.user.profile.service.GeneralProfileLocalService generalProfileLocalService;
	@BeanReference(type = com.amf.user.profile.service.GeneralProfileService.class)
	protected com.amf.user.profile.service.GeneralProfileService generalProfileService;
	@BeanReference(type = GeneralProfilePersistence.class)
	protected GeneralProfilePersistence generalProfilePersistence;
	@BeanReference(type = com.amf.user.profile.service.MovieInterestLocalService.class)
	protected com.amf.user.profile.service.MovieInterestLocalService movieInterestLocalService;
	@BeanReference(type = com.amf.user.profile.service.MovieInterestService.class)
	protected com.amf.user.profile.service.MovieInterestService movieInterestService;
	@BeanReference(type = MovieInterestPersistence.class)
	protected MovieInterestPersistence movieInterestPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private GeneralProfileLocalServiceClpInvoker _clpInvoker = new GeneralProfileLocalServiceClpInvoker();
}